Data Structures


Working With Strings


Python Practice 3.2 - How Many Vowels
#count the vowels in a given text
words = str(input())
vowels = ['aeiou']
count = 0

for v in words:
    if v == 'a':
        count += 1
    elif v == 'e':
        count += 1
    elif v== 'i':
        count += 1
    elif v== 'o':
        count += 1
    elif v== 'u':
        count += 1
    else:
        continue
print(count)


Python Practice 3.2 - Line Them Up
#multiply each letter by its place in line
string = str(input())
n=0
for i in string:
    n+=1
    print(str(i) * n)


Python Practice 3.2 - Editing Guide
#edit a word in string with a replacement
text = "Amy has 128 dollars, while David has 54 dollars. Amy is going to the zoo. David watches soccer."

a = str(input())
b = str(input())

print(text.count(a))
print(text.replace(a, b))


Code Project 5 - Letter Frequency
#check the frequency of a given character
text = str(input())
letter = str(input())
count = 0

for x in text:
    if x == letter:
        count +=1
    else:
        continue
    
frequency = (int(count) / int(len(text)) ) * 100

print(int(frequency))
//////////////////////////////////////////////////////////////////////


Lists


Python Practice 9.2 - Apple Of My Eye
#take a 2D matrix and find the percent matching the input
data = [
  [23, 11, 5, 14],
  [8, 32, 20, 5]
]
color = input()
total = sum([sum(i) for i in data])

if color == 'brown':
  print(int((data[0][0] + data[1][0])/total*100))

elif color == 'blue':
  print(int((data[0][1] + data[1][1])/total*100))

elif color == 'green':
  print(int((data[0][2] + data[1][2])/total*100))

else:
  print(int((data[0][3] + data[1][3])/total*100))


Python Practice 10.2 - Fancy Houses
#calculate the number of houses above the mean
prices = [125000, 78000, 110000, 65000, 300000, 250000, 210000, 150000, 165000, 140000, 125000, 85000, 90000, 128000, 230000, 225000, 100000, 300000]
total = sum(prices)
houses = len(prices)
avg = total/houses

count=0
for x in prices:
    if x > avg:
        count+=1

print(count)


Python Practice 11.2 - Insect Control
#double the number of lab insects each month
n = int(input())

bugs = [n*2**i for i in range(12)]

print(bugs)


Code Project 13 - Average Word Length
#take a string and calculate the mean word length
text = str(input())

total_length = len(text)
words = text.split()
word_count = len(words)
count = 0

for word in words:
    char = len(word)
    count += char
    
avg_length = int(count)/int(word_count)

print(avg_length)
/////////////////////////////////////////////////////////////////////


Dictionaries, Tuples, Sets


Python Practice 15.2 - Fuzzy Search
#make a directory. Name is the key. Output the email
contacts = {
    "David": ["123-321-88", "david@test.com"],
    "James": ["241-879-093", "james@test.com"],
    "Bob": ["987-004-322", "bob@test.com"],
    "Amy": ["340-999-213", "a@test.com"]
}
name = str(input())

if name in contacts:
    print(contacts[name][1])
else:
    print('Not found')


Python Practice 17.2 - Mapping Software
#unpack the tuples to measure distance. Print the min
points = [
    (12, 55),
    (880, 123),
    (64, 64),
    (190, 1024),
    (77, 33),
    (42, 11),
    (0, 90)
]
import math

dist = list(range(len(points)))
z=0

for (x,y) in points:
    dist[z] = math.sqrt((x**2) + (y**2))
    z+=1

print(min(dist))


Python Practice 18.2 - Words In Common
#count like words in 2 different sets
s1 = input()
s2 = input()

words1 = set(s1.split())
words2 = set(s2.split())

combine = words1 & words2

count = 0
for x in combine:
    count+=1

print(count)


Code Project 21 - Revenue Growth Analysis
#analyze revenue changes from moving the age cutoff
data = {
    "100-90": 25, "42-01": 48, "55-09": 12, "128-64": 71, "002-22": 18, "321-54": 19, "097-32": 33, "065-135": 64, "99-043": 80, "111-99": 11, "123-019": 5, "109-890": 72, "132-123": 27, "32-908": 27, "008-09": 25, "055-967": 35, "897-99": 44, "890-98": 56, "344-32": 65, "43-955": 59, "001-233": 9, "089-111": 15, "090-090": 17, "56-777": 23, "44-909": 27, "13-111": 21, "87-432": 15, "87-433": 14, "87-434": 23, "87-435": 11, "87-436": 12, "87-437": 16, "94-121": 15, "94-122": 35, "80-089": 10, "87-456": 8, "87-430": 40
}
age = int(input())
original_price = 0
age_price = 0

def calculate_rate(floor, count):
    for value in data.values():
        if value >= floor:
            count += 20
        else:
            count += 5
    return count

original_price = calculate_rate(18, original_price)
age_price = calculate_rate(age, age_price)

revenue = ((age_price-original_price) / original_price)*100

print(int(revenue))
////////////////////////////////////////////////////////////////////////


User-Defined Data Structures


Python Practice 23.2 - Come Back
#use a stack to make a back button
class Browser:
    def __init__(self):
      self.links = []  
  
    def is_empty(self):
      return self.links == []
  
    def push(self, link):
      self.links.insert(0, link)
    
    def pop(self):
      return self.links.pop(0)
    
  
x = Browser()
x.push('about:blank')
x.push('www.sololearn.com')
x.push('www.sololearn.com/courses/')
x.push('www.sololearn.com/courses/python/')

while not x.is_empty():
    print(x.pop())


Python Practice 24.2 - On A Call
#Use a Queue to apply to a call center
class CallCenter:
    def __init__(self):
      self.customers = []

    def is_empty(self):
      return self.customers == []

    def add(self, x):
      self.customers.insert(0, x)

    def next(self):
      return self.customers.pop()

c = CallCenter()

while True:
    n = input()
    if n == 'end':
        break
    c.add(n)

time = 0
while True:
  if c.is_empty():
    break
  item = c.next()

  if item == 'general':
    time+=5
  if item == 'technical':
    time+=10

print(time)


Python Practice 25.2 - Name That Tune
#make a linked list to form a playlist
class Track:
    def __init__(self, title, next):
        self.title = title
        self.next = next

class Player:
    def __init__(self):
        self.head = None

    def add(self, title):
        if not self.head:
            self.head = Track(title, None)
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = Track(title, None)

p = Player()
while True:
    x = input()
    if x == 'end':
        break
    p.add(x)

n = p.head
while n != None:
    print(n.title)
    n = n.next


Python Practice 26.2 - Let's Connect
#connect social media users based on graph data
class X(): 
    def __init__(self, size): 
        self.adj = [ [0] * size for i in range(size)]
        self.size = size 
    
    def add_friend(self, x, y): 
        if x > self.size or y > self.size or x < 0 or y < 0: 
            print("Error") 
        else: 
            self.adj[x-1][y-1] = 1 
            self.adj[y-1][x-1] = 1 
        
    def remove_friend(self, x, y): 
        if x > self.size or y > self.size or x < 0 or y < 0: 
            print("Error") 
        else: 
            self.adj[x-1][y-1] = 0 
            self.adj[y-1][x-1] = 0 
            
x = X(5)

x.add_friend(1, 3) 
x.add_friend(1, 5)
x.add_friend(2, 5)
x.add_friend(2, 4)
x.add_friend(4, 5)

n = int(input())
count = 0

for i in range(len(x.adj)):
    if i+1==n:
        for j in x.adj[i]:
            if j == 1:
                count+=1
print(count)


Code Project 28 - Balanced Parenthesis
#make a code that ensures parenthesis are balanced
def balanced(expression):
    #your code goes here
    bracket_stack = []
    for char in expression:
        if char == "(":
            bracket_stack.insert(0, char)
        elif char == ")":
            try:
                bracket_stack.pop(0)
            except IndexError:
                return False
    
    return bracket_stack == []

print(balanced(input()))
